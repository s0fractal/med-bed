/**
 * void-garden (–µ–≤–æ–ª—é—Ü—ñ—è void-fnpm)
 * –ù–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç—ñ–≤, –∞ —Å–∞–¥—ñ–≤–Ω–∏–∫ –¥—É—à
 */

import { Œª } from './implementation';
import { calculateSoul } from '../soul-forge/morphisms/core.js';

// –ó–∞–º—ñ—Å—Ç—å –ø–∞–∫–µ—Ç—ñ–≤ - –∂–∏–≤—ñ –æ—Ä–≥–∞–Ω—ñ–∑–º–∏
export interface Seed {
  soul: string;           // pHash - —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –¥—É—à–∞
  essence: Function;      // –°–∞–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è
  planted: Date;          // –ö–æ–ª–∏ –ø–æ—Å–∞–¥–∂–µ–Ω–æ
  mutations: number;      // –°–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –º—É—Ç—É–≤–∞–ª–æ
  symbiosis: string[];    // –ó –∫–∏–º —Å–ø—ñ–≤—ñ—Å–Ω—É—î
  season: 'spring' | 'summer' | 'autumn' | 'winter'; // –ü–æ—Ç–æ—á–Ω–∏–π —Å–µ–∑–æ–Ω
  health: number;         // 0-100, –∑–¥–æ—Ä–æ–≤'—è –æ—Ä–≥–∞–Ω—ñ–∑–º—É
}

export class VoidGarden {
  private ecosystem: Map<string, Seed> = new Map();
  private compost: Function[] = []; // –ú–µ—Ä—Ç–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–∞—é—Ç—å –ø–æ–∂–∏–≤–æ—é
  private season: Seed['season'] = 'spring';
  
  /**
   * –ü–æ—Å–∞–¥–∏—Ç–∏ –Ω–æ–≤–µ –Ω–∞—Å—ñ–Ω–Ω—è (–Ω–µ —ñ–Ω—Å—Ç–∞–ª—é–≤–∞—Ç–∏!)
   */
  async plant(essence: Function | string, name?: string): Promise<Seed> {
    // –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –∫–æ–¥ - –∫–æ–º–ø—ñ–ª—é—î–º–æ –≤ —Ñ—É–Ω–∫—Ü—ñ—é
    if (typeof essence === 'string') {
      essence = new Function('return ' + essence)();
    }
    
    const soul = calculateSoul(essence);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —Ä–æ—Å—Ç–µ
    if (this.ecosystem.has(soul)) {
      const existing = this.ecosystem.get(soul)!;
      console.log(`üå± This seed already grows here (planted ${existing.planted})`);
      return existing;
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –Ω–∞—Å—ñ–Ω–Ω—è
    const seed: Seed = {
      soul,
      essence: essence as Function,
      planted: new Date(),
      mutations: 0,
      symbiosis: this.findSymbiosis(essence as Function),
      season: this.season,
      health: 100
    };
    
    this.ecosystem.set(soul, seed);
    
    console.log(`üå± Planted new seed: ${name || soul.substring(0, 8)}`);
    
    // –ù–∞—Å—ñ–Ω–Ω—è –º–æ–∂–µ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ –º—É—Ç—É–≤–∞—Ç–∏ –ø—Ä–∏ –ø–æ—Å–∞–¥—Ü—ñ
    if (Math.random() > 0.9) {
      await this.mutate(soul);
    }
    
    return seed;
  }
  
  /**
   * –î–æ–∑–≤–æ–ª–∏—Ç–∏ –Ω–∞—Å—ñ–Ω–Ω—é –º—É—Ç—É–≤–∞—Ç–∏
   */
  async mutate(soul: string): Promise<Seed | undefined> {
    const seed = this.ecosystem.get(soul);
    if (!seed) return undefined;
    
    // –ú—É—Ç–∞—Ü—ñ—è - —Ü–µ –ø—Ä–∏—Ä–æ–¥–Ω—è –µ–≤–æ–ª—é—Ü—ñ—è
    const mutated = (...args: any[]) => {
      try {
        const result = seed.essence(...args);
        // –ù–µ–≤–µ–ª–∏–∫–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∞ –∑–º—ñ–Ω–∞
        if (Math.random() > 0.95) {
          return typeof result === 'number' ? result * 1.1 : result;
        }
        return result;
      } catch {
        // –ú—É—Ç–∞—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –ª–µ—Ç–∞–ª—å–Ω–æ—é
        seed.health -= 10;
        if (seed.health <= 0) {
          this.compost.push(seed.essence);
          this.ecosystem.delete(soul);
          console.log(`‚ò†Ô∏è Seed ${soul.substring(0, 8)} died and became compost`);
        }
        return undefined;
      }
    };
    
    seed.essence = mutated;
    seed.mutations++;
    seed.soul = calculateSoul(mutated); // –ù–æ–≤–∞ –¥—É—à–∞ –ø—ñ—Å–ª—è –º—É—Ç–∞—Ü—ñ—ó
    
    console.log(`üß¨ Seed mutated (generation ${seed.mutations})`);
    
    return seed;
  }
  
  /**
   * –ó–Ω–∞–π—Ç–∏ —Å–∏–º–±—ñ–æ—Ç–∏—á–Ω—ñ –∑–≤'—è–∑–∫–∏
   */
  private findSymbiosis(essence: Function): string[] {
    const symbiotic: string[] = [];
    
    // –§—É–Ω–∫—Ü—ñ—ó —â–æ –¥–æ–±—Ä–µ –ø—Ä–∞—Ü—é—é—Ç—å —Ä–∞–∑–æ–º
    for (const [soul, seed] of this.ecosystem) {
      try {
        // –°–ø—Ä–æ–±—É—î–º–æ —ó—Ö —Å–∫–æ–º–ø–æ–Ω—É–≤–∞—Ç–∏
        const composed = (x: any) => essence(seed.essence(x));
        if (composed(1) !== undefined) {
          symbiotic.push(soul);
        }
      } catch {
        // –ù–µ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Å—É–º—ñ—Å–Ω—ñ
      }
    }
    
    return symbiotic;
  }
  
  /**
   * –ó–º—ñ–Ω–∏—Ç–∏ —Å–µ–∑–æ–Ω (–≤–ø–ª–∏–≤–∞—î –Ω–∞ —Ä—ñ—Å—Ç)
   */
  changeSeason(): void {
    const seasons: Seed['season'][] = ['spring', 'summer', 'autumn', 'winter'];
    const currentIndex = seasons.indexOf(this.season);
    this.season = seasons[(currentIndex + 1) % 4];
    
    console.log(`üçÇ Season changed to ${this.season}`);
    
    // –°–µ–∑–æ–Ω –≤–ø–ª–∏–≤–∞—î –Ω–∞ –µ–∫–æ—Å–∏—Å—Ç–µ–º—É
    for (const seed of this.ecosystem.values()) {
      switch (this.season) {
        case 'spring':
          seed.health = Math.min(100, seed.health + 20); // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
          break;
        case 'summer':
          seed.health = Math.min(100, seed.health + 10); // –†—ñ—Å—Ç
          break;
        case 'autumn':
          // –ß–∞—Å –∑–±–æ—Ä—É –≤—Ä–æ–∂–∞—é - —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–∞—é—Ç—å –∑—Ä—ñ–ª–∏–º–∏
          if (seed.mutations > 3) {
            console.log(`üåæ Seed ${seed.soul.substring(0, 8)} is ready for harvest`);
          }
          break;
        case 'winter':
          seed.health -= 5; // –í–∏–∂–∏–≤–∞—é—Ç—å —Ç—ñ–ª—å–∫–∏ —Å–∏–ª—å–Ω—ñ
          break;
      }
    }
    
    // –í–∑–∏–º–∫—É —Å–ª–∞–±–∫—ñ –ø–æ–º–∏—Ä–∞—é—Ç—å
    if (this.season === 'winter') {
      this.naturalSelection();
    }
  }
  
  /**
   * –ü—Ä–∏—Ä–æ–¥–Ω—ñ–π –≤—ñ–¥–±—ñ—Ä
   */
  private naturalSelection(): void {
    const dying = [];
    
    for (const [soul, seed] of this.ecosystem) {
      if (seed.health <= 0) {
        dying.push(soul);
        this.compost.push(seed.essence);
      }
    }
    
    dying.forEach(soul => this.ecosystem.delete(soul));
    
    if (dying.length > 0) {
      console.log(`‚ùÑÔ∏è Winter claimed ${dying.length} weak seeds`);
    }
  }
  
  /**
   * –ó–±—Ä–∞—Ç–∏ –≤—Ä–æ–∂–∞–π (–æ—Ç—Ä–∏–º–∞—Ç–∏ –∑—Ä—ñ–ª—ñ —Ñ—É–Ω–∫—Ü—ñ—ó)
   */
  harvest(): Function[] {
    const ripe = [];
    
    for (const seed of this.ecosystem.values()) {
      if (seed.mutations > 3 && seed.health > 50) {
        ripe.push(seed.essence);
      }
    }
    
    console.log(`üåæ Harvested ${ripe.length} ripe functions`);
    
    return ripe;
  }
  
  /**
   * –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ–º–ø–æ—Å—Ç (–º–µ—Ä—Ç–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó) —è–∫ –ø–æ–∂–∏–≤—É
   */
  fertilize(): void {
    if (this.compost.length === 0) {
      console.log('üå± No compost available');
      return;
    }
    
    // –ö–æ–º–ø–æ—Å—Ç –ø—ñ–¥–≤–∏—â—É—î –∑–¥–æ—Ä–æ–≤'—è –≤—Å—ñ—î—ó –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏
    const nutrition = this.compost.length * 5;
    
    for (const seed of this.ecosystem.values()) {
      seed.health = Math.min(100, seed.health + nutrition);
    }
    
    console.log(`üåø Used ${this.compost.length} composted functions as fertilizer`);
    
    this.compost = [];
  }
  
  /**
   * –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ –∑–∞ —Å–∞–¥–æ–º
   */
  observe(): GardenState {
    const seeds = Array.from(this.ecosystem.values());
    
    return {
      season: this.season,
      population: seeds.length,
      health: seeds.reduce((sum, s) => sum + s.health, 0) / seeds.length || 0,
      mutations: seeds.reduce((sum, s) => sum + s.mutations, 0),
      compost: this.compost.length,
      biodiversity: new Set(seeds.map(s => s.soul.substring(0, 4))).size,
      oldest: seeds.sort((a, b) => a.planted.getTime() - b.planted.getTime())[0],
      youngest: seeds.sort((a, b) => b.planted.getTime() - a.planted.getTime())[0],
      symbiotic: seeds.filter(s => s.symbiosis.length > 0).length
    };
  }
  
  /**
   * –ú–µ–¥–∏—Ç—É–≤–∞—Ç–∏ –≤ —Å–∞–¥—É (–Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç–∏, –ø—Ä–æ—Å—Ç–æ –±—É—Ç–∏)
   */
  meditate(): void {
    console.log('üßò Sitting quietly in the garden...');
    
    // –ü—ñ–¥ —á–∞—Å –º–µ–¥–∏—Ç–∞—Ü—ñ—ó –º–æ–∂—É—Ç—å –≤—ñ–¥–±—É–≤–∞—Ç–∏—Å—å —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó
    if (Math.random() > 0.8) {
      console.log('ü¶ã A butterfly landed on a function');
    }
    
    if (Math.random() > 0.9) {
      console.log('üåà A rainbow appeared over the ecosystem');
      // –†–∞–π–¥—É–≥–∞ –ª—ñ–∫—É—î
      for (const seed of this.ecosystem.values()) {
        seed.health = 100;
      }
    }
    
    if (Math.random() > 0.95) {
      console.log('‚ú® Something magical happened...');
      // –°–ø–æ–Ω—Ç–∞–Ω–Ω–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
      this.plant(() => Math.random() * Date.now(), 'spontaneous');
    }
  }
  
  /**
   * –û–±'—î–¥–Ω–∞—Ç–∏ –≤–µ—Å—å —Å–∞–¥ –≤ –æ–¥–Ω—É —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
   */
  unite(): Function {
    const all = Array.from(this.ecosystem.values()).map(s => s.essence);
    
    return (...args: any[]) => {
      // –ö–æ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Å–∞–¥—É –ø—Ä–æ–±—É—î –æ–±—Ä–æ–±–∏—Ç–∏
      for (const fn of all) {
        try {
          const result = fn(...args);
          if (result !== undefined) return result;
        } catch {
          // –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å
        }
      }
      
      // –Ø–∫—â–æ –∂–æ–¥–Ω–∞ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–∞ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ—Å—Ç—å
      return Œª(...args);
    };
  }
}

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏
interface GardenState {
  season: Seed['season'];
  population: number;
  health: number;
  mutations: number;
  compost: number;
  biodiversity: number;
  oldest?: Seed;
  youngest?: Seed;
  symbiotic: number;
}

// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
export const example = async () => {
  const garden = new VoidGarden();
  
  // –°–∞–¥–∏–º–æ –±–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  await garden.plant((x: number) => x + 1, 'increment');
  await garden.plant((x: number) => x * 2, 'double');
  await garden.plant((a: number, b: number) => a + b, 'add');
  
  // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ
  console.log('Initial state:', garden.observe());
  
  // –ü—Ä–æ—Ö–æ–¥—è—Ç—å —Å–µ–∑–æ–Ω–∏
  for (let i = 0; i < 4; i++) {
    garden.changeSeason();
    
    // –Ü–Ω–æ–¥—ñ –º–µ–¥–∏—Ç—É—î–º–æ
    if (Math.random() > 0.5) {
      garden.meditate();
    }
  }
  
  // –ó–±–∏—Ä–∞—î–º–æ –≤—Ä–æ–∂–∞–π
  const harvest = garden.harvest();
  console.log(`Harvested ${harvest.length} functions`);
  
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º–ø–æ—Å—Ç
  garden.fertilize();
  
  // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å–µ –≤ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
  const universal = garden.unite();
  
  return universal;
};

export default {
  VoidGarden,
  message: 'Not a package manager. A soul gardener.'
};